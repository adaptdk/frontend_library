// Dependent variables
$margin: 20px;

// An flexbox like compatible dynamic column creator.
// Include Mixin on wrapper for children to justify.
// dynCol Mixin Usage
@mixin dyncol {
  @for $i from 1 through 12 {
    > *:first-of-type:nth-last-of-type(#{$i}),
    > *:first-of-type:nth-last-of-type(#{$i}) ~ * {
      width: calc(100% / #{$i} - #{$margin} + (#{$margin} / #{$i}));
      margin-left: $margin/2;
      margin-right: $margin/2;
      margin-bottom: 0;
      display: block;
      float: left;

      &:first-child {
        margin-left: 0;
      }
      &:last-child {
        margin-right: 0;
      }
    }
  }
}

// dynCol Mixin Usage with display: inline-block with a minus margin hack.
@mixin dyncol-inline {
  @for $i from 1 through 12 {
    > *:first-of-type:nth-last-of-type(#{$i}),
    > *:first-of-type:nth-last-of-type(#{$i}) ~ * {
      width: calc(100% / #{$i} - #{$margin} + (#{$margin} / #{$i}));
      margin-right: $margin;
      margin-bottom: 0;
      display: inline-block;
      &:first-child {
        margin-left: 0;
      }
      &:last-child {
        margin-right: 0;
      }
      &:nth-child(1n+2) {
        margin-left: -4px;
      }
    }
  }
}

// dynCol Mixin Usage with display: inline-block with no fix. Useful if you've compressed/minified your HTML.
@mixin dyncol-minified {
  @for $i from 1 through 12 {
    > *:first-of-type:nth-last-of-type(#{$i}),
    > *:first-of-type:nth-last-of-type(#{$i}) ~ * {
      width: calc(100% / #{$i} - #{$margin} + (#{$margin} / #{$i}));
      margin-left: $margin/2;
      margin-right: $margin/2;
      margin-bottom: 0;
      display: inline-block;

      &:first-child {
        margin-left: 0;
      }
      &:last-child {
        margin-right: 0;
      }
    }
  }
}